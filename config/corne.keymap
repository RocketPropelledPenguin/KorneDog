#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        LOCK {
            bindings = <&kp C_AL_LOCK>;
            key-positions = <32 31 30>;
        };

        SZ {
            bindings = <&kp MINUS>;
            key-positions = <11 20>;
        };

        altF4 { 
            bindings = <&kp LA(F4)>;
            key-positions = <0 4>;
        };

        save { 
        bindings = <&kp LS(S)>;
        key-positions = <10 14>;
        };
    };

    behaviors {
        hrm: home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
        
        td_oe: tap_dance_oe {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp P>, <&kp SEMI>,;
        };
        
        td_ue: tap_dance_ue {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp U>, <&kp LBKT>, ;
        };
        
        td_ae: tap_dance_ae {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp F>, <&kp SQT>, ;
        };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "Korne";

            // -----------------------------------------------------------------------------------------
            // |  Q  |  D  |  R  |  W  |  B  |   |  J  |  F   |  U  |  P  |  ;  |
            // |  A  |  S  |  H  |  T  |  G  |   |  Y  |  N   |  E  |  O  |  I  |
            // |  Z  |  X  |  M  |  C  |  V  |   |  K  |  L   |  ,  |  .  |  /  |
            //             | GUI | EXT | SPC |   | ENT | CON  |  ~  |

            bindings = <
  &kp Q  &kp D               &kp R             &kp W           &kp B        &kp J      &kp F            &kp U              &kp P                &kp TAB
  &kp A  &hrm LEFT_CONTROL S  &hrm LEFT_SHIFT H  &hrm LEFT_ALT T  &kp G        &kp Y      &hrm RIGHT_ALT N  &hrm RIGHT_SHIFT E  &hrm RIGHT_CONTROL O  &kp I
  &kp Z  &kp X               &kp M             &kp C           &kp V        &kp K      &kp L            &kp COMMA          &kp DOT              &kp FSLH
                             &kp LGUI          &mo 1           &kp SPACE    &kp ENTER  &mo 2            &kp BSPC
            >;
        };

        exten {
            bindings = <
  &kp LS(EQUAL)         &kp N1  &kp N2    &kp N3  &kp SLASH       &kp LS(N8)  &kp LS(N9)  &kp EXCLAMATION  &kp RA(Q)          &trans
  &kp LS(RIGHT_BRACKET) &kp N4  &kp N5    &kp N6  &kp LS(N7)    &kp RA(N8)  &kp RA(N9)  &kp LS(MINUS)    &kp PERCENT        &kp BACKSLASH
  &kp LS(N0)      &kp N7  &kp N8    &kp N9  &kp N0          &kp RA(N7)  &kp RA(N0)  &kp LS(N2)      &kp LS(AMPERSAND)  &kp RA(MINUS)
                                &kp LGUI  &mo 1   &kp SPACE       &kp ENTER   &mo 2       &kp BSPC
            >;
        };

        contr {
            bindings = <
  &trans  &kp RA(F2)        &kp LS(F3)      &kp LS(NUMBER_3)  &trans           &kp INS        &kp HOME        &kp UP     &kp END    &kp PAGE_UP
  &trans  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LEFT_ALT      &kp C_AC_UNDO    &kp DELETE     &kp LEFT        &kp DOWN   &kp RIGHT  &kp PAGE_DOWN
  &trans  &kp C_AC_CUT      &kp C_AC_COPY   &kp C_AC_INSERT   &kp C_AC_REDO    &kp LS(COMMA)  &kp LS(PERIOD)  &kp PIPE2  &kp GRAVE  &kp EQUAL
                            &kp LGUI        &mo 1             &kp SPACE        &kp ENTER      &mo 2           &kp BSPC
            >;
        };

        func {
            bindings = <
  &kp F1  &kp F2   &kp F3    &kp F4   &kp C_AC_FIND     &bt BT_SEL 0      &bt BT_SEL 1    &bt BT_SEL 2      &bt BT_SEL 3        &bt BT_SEL 4
  &kp F5  &kp F6   &kp F7    &kp F8   &kp LEFT_SHIFT    &kp LS(C_VOL_UP)  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT          &kp PAGE_DOWN
  &kp F9  &kp F10  &kp F11   &kp F12  &bt BT_CLR        &kp C_VOL_DN      &kp C_REWIND    &kp C_MUTE        &kp C_FAST_FORWARD  &kp LS(NUMBER_4)
                   &kp LGUI  &mo 1    &kp SPACE         &kp ENTER         &mo 2           &kp BSPC
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Functionlayer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
};
